import io
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from story_image import *

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = '7011351217:AAHArFPjVC13IlexGydcyn7eUsVk45SboBQ'

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# bot = Bot(token=API_TOKEN)
# storage = MemoryStorage()
# dp = Dispatcher(bot, storage=storage)

# class Form(StatesGroup):
#     waiting_for_text = State()

# @dp.message_handler(commands=['start'])
# async def cmd_start(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏—Å—Ç–æ—Ä–∏—é, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∫ –Ω–µ–π.")
#     await Form.waiting_for_text.set()

# @dp.message_handler(state=Form.waiting_for_text)
# async def process_text(message: types.Message, state: FSMContext):
#     user_text = message.text
    
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ gen_img
#     best_frames, best_clips, best_lpips, story_ls = gen_img(user_text)
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ø–∏—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
#     if not (len(best_frames) == len(best_clips) == len(best_lpips) == len(story_ls)):
#         await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω—ã —Å–ø–∏—Å–∫–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã")
#         await state.finish()
#         return
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#     for i in range(len(story_ls)):
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
#         msg_text = f"{story_ls[i]}\n\n–ú–µ—Ç—Ä–∏–∫–∏:\nCLIP: {best_clips[i]}\nLPIPS: {best_lpips[i]}"
        
#         # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
#         img_byte_arr = io.BytesIO()
#         best_frames[i].save(img_byte_arr, format='JPEG')
#         img_byte_arr.seek(0)
        
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
#         await message.answer_photo(types.InputFile(img_byte_arr), caption=msg_text)
    
#     await state.finish()

# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True)

import io
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime

# # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
# API_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot_start_time = datetime.now()

async def on_startup(dp):
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text="ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {bot_start_time}")

async def on_shutdown(dp):
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text="üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è gen_img (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
def gen_img(text: str):
    # –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    # –ü—Ä–∏–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
    from PIL import Image, ImageDraw
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = []
    for i in range(4):
        img = Image.new('RGB', (256, 256), color=(i*50, i*30, i*70))
        d = ImageDraw.Draw(img)
        d.text((10, 10), f"Image {i+1}", fill=(255, 255, 0))
        images.append(img)
    
    best_frames = images
    best_clips = [0.9, 0.8, 0.7, 0.6]
    best_lpips = [0.1, 0.2, 0.3, 0.4]
    story_ls = [
        "–ò—Å—Ç–æ—Ä–∏—è 1 –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É",
        "–ò—Å—Ç–æ—Ä–∏—è 2 –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É",
        "–ò—Å—Ç–æ—Ä–∏—è 3 –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É",
        "–ò—Å—Ç–æ—Ä–∏—è 4 –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É"
    ]
    return best_frames, best_clips, best_lpips, story_ls

class Form(StatesGroup):
    waiting_for_text = State()

@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await message.answer("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É.\n"
                        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏—è–º–∏!\n\n"
                        f"üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {bot_start_time.strftime('%d.%m.%Y %H:%M')}")
    await Form.waiting_for_text.set()

@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    uptime = datetime.now() - bot_start_time
    await message.answer(f"üü¢ –ë–æ—Ç –≤ —Ä–∞–±–æ—Ç–µ\n"
                        f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}\n"
                        f"üìÖ –ó–∞–ø—É—â–µ–Ω: {bot_start_time.strftime('%d.%m.%Y %H:%M:%S')}")

@dp.message_handler(state=Form.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    user_text = message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    status_msg = await message.answer("üñ® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ gen_img)
        await asyncio.sleep(1)  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ gen_img
        best_frames, best_clips, best_lpips, story_ls = gen_img(user_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ø–∏—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
        if not (len(best_frames) == len(best_clips) == len(best_lpips) == len(story_ls)):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω—ã —Å–ø–∏—Å–∫–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã")
            await state.finish()
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await bot.delete_message(chat_id=message.chat.id, message_id=status_msg.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        progress_msg = await message.answer(f"üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(story_ls)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(len(story_ls)):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            msg_text = f"üìñ {story_ls[i]}\n\nüìä –ú–µ—Ç—Ä–∏–∫–∏:\nüñº CLIP: {best_clips[i]:.2f}\nüìê LPIPS: {best_lpips[i]:.2f}"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
            img_byte_arr = io.BytesIO()
            best_frames[i].save(img_byte_arr, format='JPEG')
            img_byte_arr.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await message.answer_photo(types.InputFile(img_byte_arr), caption=msg_text)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.5)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await bot.delete_message(chat_id=message.chat.id, message_id=progress_msg.message_id)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                           "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.")
    
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        #await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {str(e)}")
    
    finally:
        await state.finish()

if __name__ == '__main__':
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    #ADMIN_CHAT_ID = 123456789
    
    executor.start_polling(dp, 
                         on_startup=on_startup, 
                         on_shutdown=on_shutdown, 
                         skip_updates=True)
