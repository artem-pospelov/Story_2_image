import io
import asyncio
import json
import concurrent.futures
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime
import aioredis
from story_image import *

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = 'YOUR_BOT_TOKEN'
ADMIN_CHAT_ID = 234037002
REDIS_URL = "redis://localhost"
MAX_WORKERS = 4  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
executor_pool = concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS)

class Form(StatesGroup):
    waiting_for_style = State()
    waiting_for_text = State()

async def on_startup(dp):
    await bot.send_message(ADMIN_CHAT_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.create_task(task_consumer())

async def on_shutdown(dp):
    await bot.send_message(ADMIN_CHAT_ID, "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    redis = await aioredis.from_url(REDIS_URL)
    await redis.close()

async def task_consumer():
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    redis = await aioredis.from_url(REDIS_URL)
    while True:
        _, task_data = await redis.blpop('image_queue')
        task = json.loads(task_data)
        await process_image_task(task)

async def process_image_task(task):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        user_id = task['user_id']
        chat_id = task['chat_id']
        text = task['text']
        style = task['style']
        
        # –ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        result = await asyncio.get_event_loop().run_in_executor(
            executor_pool,
            lambda: gen_img(text, style)
        )
        
        best_frames, best_clips, best_lpips, story_ls = result
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for i in range(len(story_ls)):
            caption = (
                f"üé® –°—Ç–∏–ª—å: {'Midjourney' if style else '–û–±—ã—á–Ω—ã–π'}\n"
                f"üìñ {story_ls[i]}\n\n"
                f"üìä –ú–µ—Ç—Ä–∏–∫–∏:\nüñº CLIP: {best_clips[i]:.2f}\nüìê LPIPS: {best_lpips[i]:.2f}"
            )
            with io.BytesIO() as output:
                best_frames[i].save(output, format='JPEG')
                output.seek(0)
                await bot.send_photo(chat_id, types.InputFile(output), caption=caption)
                await asyncio.sleep(0.1)
        
        await bot.send_message(chat_id, "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    
    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await bot.send_message(ADMIN_CHAT_ID, f"–û—à–∏–±–∫–∞ —É {user_id}: {str(e)}")

@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–î–∞", "–ù–µ—Ç")
    await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å Midjourney?", reply_markup=keyboard)
    await Form.waiting_for_style.set()

@dp.message_handler(state=Form.waiting_for_style)
async def process_style(message: types.Message, state: FSMContext):
    if message.text.lower() not in ['–¥–∞', '–Ω–µ—Ç']:
        return await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –î–∞/–ù–µ—Ç")
    
    await state.update_data(style=message.text.lower() == '–¥–∞')
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (‚â•50 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=types.ReplyKeyboardRemove())
    await Form.next()

@dp.message_handler(state=Form.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    if len(message.text) < 50:
        return await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç")
    
    data = await state.get_data()
    await state.finish()
    
    redis = await aioredis.from_url(REDIS_URL)
    task = {
        'user_id': message.from_user.id,
        'chat_id': message.chat.id,
        'text': message.text,
        'style': data['style']
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–ª–∏–Ω—É –æ—á–µ—Ä–µ–¥–∏
    queue_position = await redis.rpush('image_queue', json.dumps(task))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
    await message.answer(
        f"‚è≥ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
        f"üìç –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}\n"
        f"‚è± –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."
    )

async def process_image_task(task):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        user_id = task['user_id']
        chat_id = task['chat_id']
        text = task['text']
        style = task['style']
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await bot.send_message(chat_id, "üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")


if __name__ == '__main__':
    executor.start_polling(dp, 
                         on_startup=on_startup,
                         on_shutdown=on_shutdown,
                         skip_updates=True)
